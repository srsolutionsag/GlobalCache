Index: Services/Component/classes/class.ilPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\n\ninclude_once(\"./Services/Component/classes/class.ilComponent.php\");\ninclude_once(\"./Services/Component/exceptions/class.ilPluginException.php\");\n\n/**\n* @defgroup ServicesComponent Services/Component\n*\n* @author Alex Killing <alex.killing@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesComponent\n*/\nabstract class ilPlugin\n{\n\tprotected $lang_initialised = false;\n\t\n\t/**\n\t* Constructor\n\t*/\n\tfinal function __construct()\n\t{\n\t\t$this->__init();\n\t}\n\n\t/**\n\t* Get Component Type\n\t*\n\t* Must be overwritten in plugin class of plugin slot.\n\t* (and should be made final)\n\t*\n\t* @return\tstring\tComponent Type\n\t*/\n\tabstract function getComponentType();\n\n\t/**\n\t* Get Component Name.\n\t*\n\t* Must be overwritten in plugin class of plugin slot.\n\t* (and should be made final)\n\t*\n\t* @return\tstring\tComponent Name\n\t*/\n\tabstract function getComponentName();\n\n\t/**\n\t* Get Slot Name.\n\t*\n\t* Must be overwritten in plugin class of plugin slot.\n\t* (and should be made final)\n\t*\n\t* @return\tstring\tSlot Name\n\t*/\n\tabstract function getSlot();\n\n\t/**\n\t* Get Slot ID.\n\t*\n\t* Must be overwritten in plugin class of plugin slot.\n\t* (and should be made final)\n\t*\n\t* @return\tstring\tSlot Id\n\t*/\n\tabstract function getSlotId();\n\t\n\t/**\n\t* Get Plugin Name. Must be same as in class name il<Name>Plugin\n\t* and must correspond to plugins subdirectory name.\n\t*\n\t* Must be overwritten in plugin class of plugin\n\t* (and should be made final)\n\t*\n\t* @return\tstring\tPlugin Name\n\t*/\n\tabstract function getPluginName();\n\n\t/**\n\t* Set Id.\n\t*\n\t* @param\tstring\t$a_id\tId\n\t*/\n\tprivate final function setId($a_id)\n\t{\n\t\t$this->id = $a_id;\n\t}\n\n\t/**\n\t* Get Id.\n\t*\n\t* @return\tstring\tId\n\t*/\n\tfinal function getId()\n\t{\n\t\treturn $this->id;\n\t}\n\n\t/**\n\t* Set Version of last update.\n\t*\n\t* @param\tstring\t$a_lastupdateversion\tVersion of last update\n\t*/\n\tprivate final function setLastUpdateVersion($a_lastupdateversion)\n\t{\n\t\t$this->lastupdateversion = $a_lastupdateversion;\n\t}\n\n\t/**\n\t* Get Version of last update.\n\t*\n\t* @return\tstring\tVersion of last update\n\t*/\n\tfinal function getLastUpdateVersion()\n\t{\n\t\treturn $this->lastupdateversion;\n\t}\n\n\t/**\n\t* Set Current Version (from plugin.php file).\n\t*\n\t* @param\tstring\t$a_version\tCurrent Version (from plugin.php file)\n\t*/\n\tprivate final function setVersion($a_version)\n\t{\n\t\t$this->version = $a_version;\n\t}\n\n\t/**\n\t* Get Current Version (from plugin.php file).\n\t*\n\t* @return\tstring\tCurrent Version (from plugin.php file)\n\t*/\n\tfinal function getVersion()\n\t{\n\t\treturn $this->version;\n\t}\n\n\t/**\n\t* Set Required ILIAS min. release.\n\t*\n\t* @param\tstring\t$a_iliasminversion\tRequired ILIAS min. release\n\t*/\n\tprivate final function setIliasMinVersion($a_iliasminversion)\n\t{\n\t\t$this->iliasminversion = $a_iliasminversion;\n\t}\n\n\t/**\n\t* Get Required ILIAS min. release.\n\t*\n\t* @return\tstring\tRequired ILIAS min. release\n\t*/\n\tfinal function getIliasMinVersion()\n\t{\n\t\treturn $this->iliasminversion;\n\t}\n\n\t/**\n\t* Set Required ILIAS max. release.\n\t*\n\t* @param\tstring\t$a_iliasmaxversion\tRequired ILIAS max. release\n\t*/\n\tprivate final function setIliasMaxVersion($a_iliasmaxversion)\n\t{\n\t\t$this->iliasmaxversion = $a_iliasmaxversion;\n\t}\n\n\t/**\n\t* Get Required ILIAS max. release.\n\t*\n\t* @return\tstring\tRequired ILIAS max. release\n\t*/\n\tfinal function getIliasMaxVersion()\n\t{\n\t\treturn $this->iliasmaxversion;\n\t}\n\n\t/**\n\t* Set Active.\n\t*\n\t* @param\tboolean\t$a_active\tActive\n\t*/\n\tprivate final function setActive($a_active)\n\t{\n\t\t$this->active = $a_active;\n\t}\n\n\t/**\n\t* Get Active.\n\t*\n\t* @return\tboolean\tActive\n\t*/\n\tfinal function getActive()\n\t{\n\t\treturn $this->active;\n\t}\n\t\n\t/**\n\t* Set Plugin Slot.\n\t*\n\t* @param\tobject\t$a_slot\tPlugin Slot\n\t*/\n\tprotected final function setSlotObject($a_slot)\n\t{\n\t\t$this->slot = $a_slot;\n\t}\n\n\t/**\n\t* Get Plugin Slot.\n\t*\n\t* @return\tobject\tPlugin Slot\n\t*/\n\tprotected final function getSlotObject()\n\t{\n\t\treturn $this->slot;\n\t}\n\t\n\t/**\n\t* Set DB Version.\n\t*\n\t* @param\tint\t$a_dbversion\tDB Version\n\t*/\n\tfinal function setDBVersion($a_dbversion)\n\t{\n\t\t$this->dbversion = $a_dbversion;\n\t}\n\n\t/**\n\t* Get DB Version.\n\t*\n\t* @return\tint\tDB Version\n\t*/\n\tfinal function getDBVersion()\n\t{\n\t\treturn $this->dbversion;\n\t}\n\n\t/**\n\t* Write DB version to database \n\t*\n\t* @param\tint\t$a_dbversion\tDB Version\n\t*/\n\tfinal function writeDBVersion($a_dbversion)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$this->setDBVersion($a_dbversion);\n\t\t\n\t\t$q = \"UPDATE il_plugin SET db_version = \".$ilDB->quote((int) $this->getDBVersion(), \"integer\").\n\t\t\t\" WHERE component_type = \".$ilDB->quote($this->getComponentType(), \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($this->getComponentName(), \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($this->getSlotId(), \"text\").\n\t\t\t\" AND name = \".$ilDB->quote($this->getPluginName(), \"text\");\n\n\t\t$ilDB->manipulate($q);\n\t}\n\n\t\n\t/**\n\t* Get Plugin Directory\n\t*\n\t* @return\tobject\tPlugin Slot\n\t*/\n\tpublic final function getDirectory()\n\t{\n\t\treturn $this->getSlotObject()->getPluginsDirectory().\"/\".$this->getPluginName();\n\t}\n\t\n\t/**\n\t* Get plugin directory\n\t*/\n\tstatic public final function _getDirectory($a_ctype, $a_cname, $a_slot_id, $a_pname)\n\t{\n\t\tinclude_once \"Services/Component/classes/class.ilPluginSlot.php\";\n\t\treturn ilPluginSlot::_getPluginsDirectory($a_ctype, $a_cname, $a_slot_id).\"/\".$a_pname;\t\t\n\t}\n\t\n\n\t/**\n\t* Get Plugin's classes Directory\n\t*\n\t* @return\tobject\tclasses directory\n\t*/\n\tprotected final function getClassesDirectory()\n\t{\n\t\treturn $this->getDirectory().\"/classes\";\n\t}\n\t\n\t/**\n\t* Include (once) a class file\n\t*/\n\tpublic final function includeClass($a_class_file_name)\n\t{\n\t\tinclude_once($this->getClassesDirectory().\"/\".$a_class_file_name);\n\t}\n\n\t/**\n\t* Get Plugin's language Directory\n\t*\n\t* @return\tobject\tclasses directory\n\t*/\n\tprotected final function getLanguageDirectory()\n\t{\n\t\treturn $this->getDirectory().\"/lang\";\n\t}\n\t\n\t/**\n\t * Get array of all language files in the plugin\n\t */\n\tstatic final function getAvailableLangFiles($a_lang_directory)\n\t{\n\t\t$langs = array();\n\n\t\tif (!@is_dir($a_lang_directory))\n\t\t{\n\t\t\treturn array();\n\t\t}\n\n\t\t$dir = opendir($a_lang_directory);\n\t\twhile($file = readdir($dir))\n\t\t{\n\t\t\tif ($file != \".\" and\n\t\t\t\t$file != \"..\")\n\t\t\t{\n\t\t\t\t// directories\n\t\t\t\tif (@is_file($a_lang_directory.\"/\".$file))\n\t\t\t\t{\n\t\t\t\t\tif (substr($file, 0, 6) == \"ilias_\" &&\n\t\t\t\t\t\tsubstr($file, strlen($file) - 5) == \".lang\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$langs[] = array(\"key\" => substr($file, 6, 2), \"file\" => $file,\n\t\t\t\t\t\t\t\"path\" => $a_lang_directory.\"/\".$file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $langs;\n\t}\n\n\t/**\n\t * Has the plugin a configure class?\n\t *\n\t * @param\tstring\tslot directory\n\t * @param\tstring\tplugin name\n\t * @return\tboolean\ttrue/false\n\t */\n\tstatic final function hasConfigureClass($a_slot_dir, $a_name)\n\t{\n\t\tif (is_file($a_slot_dir.\"/\".\n\t\t\t$a_name.\"/classes/class.il\".$a_name.\"ConfigGUI.php\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get plugin configure class name\n\t *\n\t * @param\n\t * @return\n\t */\n\tstatic final function getConfigureClassName($a_name)\n\t{\n\t\treturn \"il\".$a_name.\"ConfigGUI\";\n\t}\n\n\t/**\n\t* Get plugin prefix, used for lang vars\n\t*/\n\tfinal function getPrefix()\n\t{\n\t\treturn $this->getSlotObject()->getPrefix().\"_\".$this->getId();\n\t}\n\n\t/**\n\t* Get DB update script filename (full path)\n\t*\n\t* @return\tstring\t\tDB Update script name\n\t*/\n\tstatic public final function getDBUpdateScriptName($a_ctype, $a_cname, $a_slot_name, $a_pname)\n\t{\n\t\treturn \"Customizing/global/plugins/\".$a_ctype.\"/\".$a_cname.\"/\".\n\t\t\t$a_slot_name.\"/\".$a_pname.\"/sql/dbupdate.php\";\n\t}\n\n\t/**\n\t* Get db table plugin prefix\n\t*/\n\tfinal function getTablePrefix()\n\t{\n\t\treturn $this->getPrefix();\n\t}\n\t\n\t/**\n\t* Update all languages\n\t*/\n\tfinal public function updateLanguages()\n\t{\n\t\tglobal $ilCtrl;\n\t\t\n\t\tinclude_once(\"./Services/Language/classes/class.ilObjLanguage.php\");\n\t\t\n\t\t$langs = $this->getAvailableLangFiles($this->getLanguageDirectory());\n\t\t\n\t\t$prefix = $this->getPrefix();\n\t\t\n\t\tforeach($langs as $lang)\n\t\t{\n\t\t\t$txt = file($this->getLanguageDirectory().\"/\".$lang[\"file\"]);\n\t\t\t$lang_array = array();\n\n\t\t\t// get language data\n\t\t\tif (is_array($txt))\n\t\t\t{\n\t\t\t\tforeach ($txt as $row)\n\t\t\t\t{\n\t\t\t\t\tif ($row[0] != \"#\" && strpos($row, \"#:#\") > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$a = explode(\"#:#\",trim($row));\n\t\t\t\t\t\t$lang_array[$prefix.\"_\".trim($a[0])] = trim($a[1]);\n\t\t\t\t\t\tilObjLanguage::replaceLangEntry($prefix, $prefix.\"_\".trim($a[0]),\n\t\t\t\t\t\t\t$lang[\"key\"], trim($a[1]));\n//echo \"<br>-$prefix-\".$prefix.\"_\".trim($a[0]).\"-\".$lang[\"key\"].\"-\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tilObjLanguage::replaceLangModule($lang[\"key\"], $prefix,\n\t\t\t\t$lang_array);\n\t\t}\n\t}\n\t\n\t/**\n\t* Update database\n\t*/\n\tfunction updateDatabase()\n\t{\n\t\tglobal $ilDB, $lng;\n\t\t\n\t\tinclude_once(\"./Services/Component/classes/class.ilPluginDBUpdate.php\");\n\t\t$dbupdate = new ilPluginDBUpdate($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId(),\n\t\t\t$this->getPluginName(), $ilDB, true, $this->getTablePrefix());\n\t\t\n\t\t//$dbupdate->getDBVersionStatus();\n\t\t//$dbupdate->getCurrentVersion();\n\t\t\n\t\t$result = $dbupdate->applyUpdate();\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $lng->txt(\"no_changes\").\". \".$lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\t$message .= $lng->txt($row[\"msg\"]).\": \".$row[\"nr\"].\"<br/>\";\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->message.= $message;\n\n\t\treturn $result;\n\t}\n\t\n\t/**\n\t* Load language module for plugin\n\t*/\n\tpublic final function loadLanguageModule()\n\t{\n\t\tglobal $lng;\n\t\t\n\t\tif (!$this->lang_initialised && is_object($lng))\n\t\t{\n\t\t\t$lng->loadLanguageModule($this->getPrefix());\n\t\t\t$this->lang_initialised = true;\n\t\t}\n\t}\n\t\n\t/**\n\t* Get Language Variable (prefix will be prepended automatically)\n\t*/\n\tpublic final function txt($a_var)\n\t{\n\t\tglobal $lng;\n\t\t$this->loadLanguageModule();\n\t\treturn $lng->txt($this->getPrefix().\"_\".$a_var, $this->getPrefix());\n\t}\n\t\n\t/**\n\t* Lookup language text\n\t*/\n\tstatic function lookupTxt($a_mod_prefix, $a_pl_id, $a_lang_var)\n\t{\n\t\tglobal $lng;\n\t\treturn $lng->_lookupEntry($lng->lang_key, $a_mod_prefix.\"_\".$a_pl_id,\n\t\t\t$a_mod_prefix.\"_\".$a_pl_id.\"_\".$a_lang_var);\n\t}\n\t\n\t/**\n\t* Get template from plugin\n\t*/\n\tpublic final function getTemplate($a_template, $a_par1 = true, $a_par2 = true)\n\t{\n\t\t$tpl = new ilTemplate($this->getDirectory().\"/templates/\".$a_template, $a_par1, $a_par2);\n\t\t\n\t\treturn $tpl;\n\t}\n\n\t/**\n\t* Get image path\n\t*/\n\tpublic static final function _getImagePath($a_ctype, $a_cname, $a_slot_id,\n\t\t$a_pname, $a_img)\n\t{\n\t\t$d = ilPlugin::_getDirectory($a_ctype, $a_cname, $a_slot_id, $a_pname);\n\t\treturn $d.\"/templates/images/\".$a_img;\n\t}\n\n\t/**\n\t* Get image path\n\t*/\n\tpublic final function getImagePath($a_img)\n\t{\n\t\treturn $this->getDirectory().\"/templates/images/\".$a_img;\n\t}\n\t\n\t/**\n\t* Get css file location\n\t*/\n\tpublic final function getStyleSheetLocation($a_css_file)\n\t{\n\t\treturn $this->getDirectory().\"/templates/\".$a_css_file;\n\t}\n\n\t/**\n\t* Add template content to placeholder variable\n\t*/\n\tpublic final function addBlockFile($a_tpl, $a_var, $a_block, $a_tplname)\n\t{\n\t\t$a_tpl->addBlockFile($a_var, $a_block,\n\t\t\t$this->getDirectory().\"/templates/\".$a_tplname);\n\t}\n\n\t/**\n\t* Get record from il_plugin table\n\t*/\n\tstatic final public function getPluginRecord($a_ctype, $a_cname, $a_slot_id, $a_pname)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t// read/set basic data\n\t\t$q = \"SELECT * FROM il_plugin\".\n\t\t\t\" WHERE component_type = \".$ilDB->quote($a_ctype, \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($a_cname, \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($a_slot_id, \"text\").\n\t\t\t\" AND name = \".$ilDB->quote($a_pname, \"text\");\n\t\t$set = $ilDB->query($q);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec;\n\t\t}\n\t\telse\t\t// no record? create one\n\t\t{\n\t\t\t$q = \"INSERT INTO il_plugin (component_type, component_name, slot_id, name)\".\n\t\t\t\t\" VALUES (\".$ilDB->quote($a_ctype, \"text\").\",\".\n\t\t\t\t$ilDB->quote($a_cname, \"text\").\",\".\n\t\t\t\t$ilDB->quote($a_slot_id, \"text\").\",\".\n\t\t\t\t$ilDB->quote($a_pname, \"text\").\")\";\n\t\t\t$ilDB->manipulate($q);\n\t\t\t$q = \"SELECT * FROM il_plugin\".\n\t\t\t\t\" WHERE component_type = \".$ilDB->quote($a_ctype, \"text\").\n\t\t\t\t\" AND component_name = \".$ilDB->quote($a_cname, \"text\").\n\t\t\t\t\" AND slot_id = \".$ilDB->quote($a_slot_id, \"text\").\n\t\t\t\t\" AND name = \".$ilDB->quote($a_pname, \"text\");\n\t\t\t$set = $ilDB->query($q);\n\t\t\treturn $ilDB->fetchAssoc($set);\n\t\t}\n\t}\n\t\n\t/**\n\t* Default initialization\n\t*/\n\tfinal private function __init()\n\t{\n\t\tglobal $ilDB, $lng, $ilPluginAdmin;\n\t\t\n\t\t// read/set basic data\n\t\t$rec = ilPlugin::getPluginRecord($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId(), $this->getPluginName());\n\t\t$this->setLastUpdateVersion($rec[\"last_update_version\"]);\n\t\t$this->setDBVersion($rec[\"db_version\"]);\n\t\t$this->setActive($rec[\"active\"]);\n\t\t\n\t\t// get id\n\t\t$this->setId($ilPluginAdmin->getId($this->getComponentType(),\n\t\t\t$this->getComponentName(),\n\t\t\t$this->getSlotId(),\n\t\t\t$this->getPluginName()));\n\t\t\n\t\t// get version\n\t\t$this->setVersion($ilPluginAdmin->getVersion($this->getComponentType(),\n\t\t\t$this->getComponentName(),\n\t\t\t$this->getSlotId(),\n\t\t\t$this->getPluginName()));\n\t\t\t\n\t\t// get ilias min version\n\t\t$this->setIliasMinVersion($ilPluginAdmin->getIliasMinVersion($this->getComponentType(),\n\t\t\t$this->getComponentName(),\n\t\t\t$this->getSlotId(),\n\t\t\t$this->getPluginName()));\n\n\t\t// get ilias max version\n\t\t$this->setIliasMaxVersion($ilPluginAdmin->getIliasMaxVersion($this->getComponentType(),\n\t\t\t$this->getComponentName(),\n\t\t\t$this->getSlotId(),\n\t\t\t$this->getPluginName()));\n\n\t\t// get slot object\n\t\t$this->setSlotObject(new ilPluginSlot($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId()));\n\t\t\n\t\t// load language module\n\t\t\n\t\t// Fix for authentication plugins\n\t\t$this->loadLanguageModule();\n\t\t\t\n\t\t// call slot and plugin init methods\n\t\t$this->slotInit();\n\t\t$this->init();\n\t}\n\n\t/**\n\t* Object initialization done by slot.\n\t* Must be overwritten in plugin class of plugin slot.\n\t*\n\t* (and should be made protected final)\n\t*/\n\tabstract protected function slotInit();\n\n\t/**\n\t* Object initialization. Can be overwritten by plugin class\n\t* (and should be made protected final)\n\t*/\n\tprotected function init()\n\t{\n\t}\n\n\t/**\n\t* Check whether plugin is active\n\t*/\n\tpublic final function isActive()\n\t{\n\t\tglobal $ilPluginAdmin;\n\t\t\n\t\treturn $ilPluginAdmin->isActive($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId(), $this->getPluginName());\n\t}\n\t\n\t/**\n\t* Check whether update is needed.\n\t*/\n\tpublic final function needsUpdate()\n\t{\n\t\tglobal $ilPluginAdmin;\n\t\t\n\t\treturn $ilPluginAdmin->isActive($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId(), $this->getPluginName());\n\t}\n\t\n\t/**\n\t* Activate \n\t*/\n\tfinal function activate()\n\t{\n\t\tglobal $lng, $ilDB;\n\t\t\n\t\t$result = true;\n\n\t\t// check whether update is necessary\n\t\tif ($this->needsUpdate())\n\t\t{\n\t\t\t//$result = $this->isUpdatePossible();\n\t\t\t\n\t\t\t// do update\n\t\t\tif ($result === true)\n\t\t\t{\n\t\t\t\t$result = $this->update();\n\t\t\t}\n\t\t}\n\t\tif ($result === true)\n\t\t{\n\t\t\t$result = $this->beforeActivation();\n\t\t\t// activate plugin\n\t\t\tif ($result === true)\n\t\t\t{\n\t\t\t\t$q = \"UPDATE il_plugin SET active = \".$ilDB->quote(1, \"integer\").\",\".\n\t\t\t\t\t\" plugin_id = \".$ilDB->quote($this->getId(), \"text\").\n\t\t\t\t\t\" WHERE component_type = \".$ilDB->quote($this->getComponentType(), \"text\").\n\t\t\t\t\t\" AND component_name = \".$ilDB->quote($this->getComponentName(), \"text\").\n\t\t\t\t\t\" AND slot_id = \".$ilDB->quote($this->getSlotId(), \"text\").\n\t\t\t\t\t\" AND name = \".$ilDB->quote($this->getPluginName(), \"text\");\n\t\t\t\t\t\n\t\t\t\t$ilDB->manipulate($q);\n\t\t\t\t$this->afterActivation();\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\t\n\t/**\n\t* Before activation processing\n\t*/\n\tprotected function beforeActivation()\n\t{\n\t\treturn true;\t// false would indicate that anything went wrong\n\t\t\t\t\t\t// activation would not proceed\n\t\t\t\t\t\t// throw an exception in this case\n\t\t//throw new ilPluginException($lng->txt(\"\"));\n\t}\n\n\t/**\n\t* After activation processing\n\t*/\n\tprotected function afterActivation()\n\t{\n\t}\n\n\t/**\n\t* Deactivate \n\t*/\n\tfinal function deactivate()\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$result = true;\n\t\t\n\t\t$q = \"UPDATE il_plugin SET active = \".$ilDB->quote(0, \"integer\").\n\t\t\t\" WHERE component_type = \".$ilDB->quote($this->getComponentType(), \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($this->getComponentName(), \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($this->getSlotId(), \"text\").\n\t\t\t\" AND name = \".$ilDB->quote($this->getPluginName(), \"text\");\n\t\t\t\n\t\t$ilDB->manipulate($q);\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Update plugin\n\t */\n\tfinal function update()\n\t{\n\t\tglobal $ilDB, $ilCtrl;\n\t\t\n\t\t$result = true;\n\t\t\n\t\t// DB update\n\t\tif ($result === true)\n\t\t{\n\t\t\t$result = $this->updateDatabase();\n\t\t}\n\t\t\n\t\t// Load language files\n\t\t$this->updateLanguages();\n\t\t\n\t\t// load control structure\n\t\tinclude_once(\"./setup/classes/class.ilCtrlStructureReader.php\");\n\t\t$structure_reader = new ilCtrlStructureReader();\n\t\t$structure_reader->readStructure(true, \"./\".$this->getDirectory(), $this->getPrefix(),\n\t\t\t$this->getDirectory());\n//\t\t$ilCtrl->storeCommonStructures();\n\n\t\t// add config gui to the ctrl calls\n\t\t$ilCtrl->insertCtrlCalls(\"ilobjcomponentsettingsgui\", ilPlugin::getConfigureClassName($this->getPluginName()),\n\t\t\t$this->getPrefix());\n\t\t\n\t\t// set last update version to current version\n\t\tif ($result === true)\n\t\t{\n\t\t\t$q = \"UPDATE il_plugin SET last_update_version = \".$ilDB->quote($this->getVersion(), \"text\").\n\t\t\t\t\" WHERE component_type = \".$ilDB->quote($this->getComponentType(), \"text\").\n\t\t\t\t\" AND component_name = \".$ilDB->quote($this->getComponentName(), \"text\").\n\t\t\t\t\" AND slot_id = \".$ilDB->quote($this->getSlotId(), \"text\").\n\t\t\t\t\" AND name = \".$ilDB->quote($this->getPluginName(), \"text\");\n\t\t\t\t\n\t\t\t$ilDB->manipulate($q);\n\t\t}\n\n\t\treturn $result;\n\t}\n\t\n\t/**\n\t* Get plugin object.\n\t*\n\t* @param\tstring\t$a_ctype\tIL_COMP_MODULE | IL_COMP_SERVICE\n\t* @param\tstring\t$a_cname\tcomponent name\n\t* @param\tstring\t$a_sname\tplugin slot name\n\t* @param\tstring\t$a_pname\tplugin name\n\t*/\n\tfinal static function getPluginObject($a_ctype, $a_cname, $a_slot_id, $a_pname)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\tinclude_once(\"./Services/Component/classes/class.ilPluginSlot.php\");\n\t\t$slot_name = ilPluginSlot::lookupSlotName($a_ctype, $a_cname, $a_slot_id);\n\t\t\n\t\t// this check is done due to security reasons\n\t\t$set = $ilDB->queryF(\"SELECT * FROM il_component WHERE type = %s \".\n\t\t\t\" AND name = %s\", array(\"text\", \"text\"),\n\t\t\tarray($a_ctype, $a_cname));\n\t\tif (!$ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t$file = \"./Customizing/global/plugins/\".$a_ctype.\"/\".\n\t\t\t$a_cname.\"/\".$slot_name.\"/\".\n\t\t\t$a_pname.\"/classes/class.il\".$a_pname.\"Plugin.php\";\n\n\t\tif (is_file($file))\n\t\t{\n\t\t\tinclude_once($file);\n\t\t\t$class = \"il\".$a_pname.\"Plugin\";\n\t\t\t$plugin = new $class();\n\t\t\treturn $plugin;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t\n\t/**\n\t* Lookup information data in il_plugin\n\t*/\n\tfinal static function lookupStoredData($a_ctype, $a_cname, $a_slot_id, $a_pname)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT * FROM il_plugin WHERE \".\n\t\t\t\t\" component_type = \".$ilDB->quote($a_ctype, \"text\").\" AND \".\n\t\t\t\t\" component_name = \".$ilDB->quote($a_cname, \"text\").\" AND \".\n\t\t\t\t\" slot_id = \".$ilDB->quote($a_slot_id, \"text\").\" AND \".\n\t\t\t\t\" name = \".$ilDB->quote($a_pname, \"text\");\n\n\t\t$set = $ilDB->query($q);\n\t\t\n\t\t$rec = $ilDB->fetchAssoc($set);\n\t\t\n\t\treturn $rec;\n\t}\n\t\n\t/**\n\t* Get all active plugins for a slot\n\t*/\n\tstatic final function getActivePluginsForSlot($a_ctype, $a_cname, $a_slot_id)\n\t{\n\t\tglobal $ilDB, $ilPluginAdmin;\n\t\t\n\t\t$q = \"SELECT * FROM il_plugin WHERE component_type = \".$ilDB->quote($a_ctype, \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($a_cname, \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($a_slot_id, \"text\").\n\t\t\t\" AND active = \".$ilDB->quote(1, \"integer\");\n\n\t\t$set = $ilDB->query($q);\n\t\t$plugins = array();\n\t\twhile($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\tif ($ilPluginAdmin->isActive($a_ctype, $a_cname, $a_slot_id, $rec[\"name\"]))\n\t\t\t{\n\t\t\t\t$plugins[] = $rec[\"name\"];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $plugins;\n\t}\n\t\n\t/**\n\t* Lookup name for id\n\t*/\n\tfunction lookupNameForId($a_ctype, $a_cname, $a_slot_id, $a_plugin_id)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT name FROM il_plugin \".\n\t\t\t\" WHERE component_type = \".$ilDB->quote($a_ctype, \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($a_cname, \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($a_slot_id, \"text\").\n\t\t\t\" AND plugin_id = \".$ilDB->quote($a_plugin_id, \"text\");\n\n\t\t$set = $ilDB->query($q);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"name\"];\n\t\t}\n\t}\n\n\t/**\n\t* Lookup id for name\n\t*/\n\tfunction lookupIdForName($a_ctype, $a_cname, $a_slot_id, $a_plugin_name)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT plugin_id FROM il_plugin \".\n\t\t\t\" WHERE component_type = \".$ilDB->quote($a_ctype, \"text\").\n\t\t\t\" AND component_name = \".$ilDB->quote($a_cname, \"text\").\n\t\t\t\" AND slot_id = \".$ilDB->quote($a_slot_id, \"text\").\n\t\t\t\" AND name = \".$ilDB->quote($a_plugin_name, \"text\");\n\n\t\t$set = $ilDB->query($q);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"plugin_id\"];\n\t\t}\n\t}\n}\n?>
===================================================================
--- Services/Component/classes/class.ilPlugin.php	(revision 56812)
+++ Services/Component/classes/class.ilPlugin.php	(revision )
@@ -400,7 +400,7 @@
 	final public function updateLanguages()
 	{
 		global $ilCtrl;
-		
+		ilGlobalCache::flushAll();
 		include_once("./Services/Language/classes/class.ilObjLanguage.php");
 		
 		$langs = $this->getAvailableLangFiles($this->getLanguageDirectory());
\ No newline at end of file
Index: Services/Component/classes/class.ilPluginSlot.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\n\ninclude_once(\"./Services/Component/classes/class.ilPlugin.php\");\n\n/**\n* Plugin Slot\n*\n* A plugin slot defines an interface for a set of\n* plugins that share the same characteristics\n*\n*\n* @author Alex Killing <alex.killing@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesComponent\n*/\nclass ilPluginSlot\n{\n\t\n\t/**\n\t* Constructor\n\t*/\n\tfunction __construct($a_c_type, $a_c_name, $a_slot_id)\n\t{\n\t\t$this->setComponentType($a_c_type);\n\t\t$this->setComponentName($a_c_name);\n\t\t$this->setSlotId($a_slot_id);\n\t\t\n\t\tif ($a_slot_id != \"\")\n\t\t{\n\t\t\t$this->read();\n\t\t}\n\t}\n\t\n\t/**\n\t* Read properties from DB\n\t*/\n\tfunction read()\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT * FROM il_pluginslot WHERE component = \".\n\t\t\t$ilDB->quote($this->getComponentType().\"/\".$this->getComponentName(), \"text\").\n\t\t\t\" AND id = \".$ilDB->quote($this->getSlotId(), \"text\");\n\t\t$set = $ilDB->query($q);\n\t\t$rec = $ilDB->fetchAssoc($set);\n\t\t$this->setSlotName($rec[\"name\"]);\n\t}\n\t\n\t/**\n\t* Set Component Type.\n\t*\n\t* @param\tstring\t$a_componenttype\tComponent Type\n\t*/\n\tfunction setComponentType($a_componenttype)\n\t{\n\t\t$this->componenttype = $a_componenttype;\n\t}\n\n\t/**\n\t* Get Component Type.\n\t*\n\t* @return\tstring\tComponent Type\n\t*/\n\tfunction getComponentType()\n\t{\n\t\treturn $this->componenttype;\n\t}\n\n\t/**\n\t* Set Component Name.\n\t*\n\t* @param\tstring\t$a_componentname\tComponent Name\n\t*/\n\tfunction setComponentName($a_componentname)\n\t{\n\t\t$this->componentname = $a_componentname;\n\t}\n\n\t/**\n\t* Get Component Name.\n\t*\n\t* @return\tstring\tComponent Name\n\t*/\n\tfunction getComponentName()\n\t{\n\t\treturn $this->componentname;\n\t}\n\n\t/**\n\t* Set Slot ID.\n\t*\n\t* @param\tstring\t$a_slotid\tSlot ID\n\t*/\n\tfunction setSlotId($a_slotid)\n\t{\n\t\t$this->slotid = $a_slotid;\n\t}\n\n\t/**\n\t* Get Slot ID.\n\t*\n\t* @return\tstring\tSlot ID\n\t*/\n\tfunction getSlotId()\n\t{\n\t\treturn $this->slotid;\n\t}\n\n\t/**\n\t* Set Slot Name.\n\t*\n\t* @param\tstring\t$a_slotname\tSlot Name\n\t*/\n\tfunction setSlotName($a_slotname)\n\t{\n\t\t$this->slotname = $a_slotname;\n\t}\n\n\t/**\n\t* Get Slot Name.\n\t*\n\t* @return\tstring\tSlot Name\n\t*/\n\tfunction getSlotName()\n\t{\n\t\treturn $this->slotname;\n\t}\n\n\t/**\n\t* Get directory of \n\t*/\n\tfunction getPluginsDirectory()\n\t{\n\t\treturn \"./Customizing/global/plugins/\".$this->getComponentType().\n\t\t\t\"/\".$this->getComponentName().\"/\".$this->getSlotName();\n\t}\n\t\n\t/**\n\t* Get plugins directory\n\t*/\n\tfunction _getPluginsDirectory($a_ctype, $a_cname, $a_slot_id)\n\t{\n\t\treturn \"./Customizing/global/plugins/\".$a_ctype.\n\t\t\t\"/\".$a_cname.\"/\".ilPluginSlot::lookupSlotName($a_ctype, $a_cname, $a_slot_id);\n\t}\n\t\n\t\n\t/**\n\t* Get File name for plugin.php\n\t*/\n\tfunction getPluginPhpFileName($a_plugin_name)\n\t{\n\t\treturn $this->getPluginsDirectory().\"/\".\n\t\t\t$a_plugin_name.\"/plugin.php\";\n\t}\n\t\n\t/**\n\t* Check whether plugin.php file is available for plugin or not\n\t*/\n\tfunction checkPluginPhpFileAvailability($a_plugin_name)\n\t{\n\t\tif (@is_file($this->getPluginPhpFileName($a_plugin_name)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* Get Class File name for plugin\n\t*/\n\tfunction getPluginClassFileName($a_plugin_name)\n\t{\n\t\treturn $this->getPluginsDirectory().\"/\".\n\t\t\t$a_plugin_name.\"/classes/class.il\".$a_plugin_name.\"Plugin.php\";\n\t}\n\n\t/**\n\t* Check whether Plugin class file is available for plugin or not\n\t*/\n\tfunction checkClassFileAvailability($a_plugin_name)\n\t{\n\t\tif (@is_file($this->getPluginClassFileName($a_plugin_name)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* Get slot prefix, used for lang vars and db tables. Needs\n\t* plugin id appended.\n\t*/\n\tfunction getPrefix()\n\t{\n\t\tif ($this->prefix == \"\")\n\t\t{\n\t\t\t$this->prefix = \n\t\t\t\tilComponent::lookupId($this->getComponentType(),\n\t\t\t\t$this->getComponentName()).\"_\".$this->getSlotId();\n\t\t}\n\t\t\t\n\t\treturn $this->prefix;\n\t}\n\n\t/**\n\t* Get information an all plugins and their status.\n\t*/\n\tfunction getPluginsInformation()\n\t{\n\t\tglobal $ilPluginAdmin;\n\t\t\n\t\t// read plugins directory\n\t\t$pl_dir = $this->getPluginsDirectory();\n\n\t\tif (!@is_dir($pl_dir))\n\t\t{\n\t\t\treturn array();\n\t\t}\n\t\t\n\t\t$dir = opendir($pl_dir);\n\n\t\t$plugins = array();\n\t\twhile($file = readdir($dir))\n\t\t{\n\t\t\tif ($file != \".\" and\n\t\t\t\t$file != \"..\")\n\t\t\t{\n\t\t\t\t// directories\n\t\t\t\tif (@is_dir($pl_dir.\"/\".$file) && substr($file, 0, 1) != \".\" &&\n\t\t\t\t\tis_file($pl_dir.\"/\".$file.\"/plugin.php\"))\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t$plugin = array();\n\t\t\t\t\t\n\t\t\t\t\t$plugin = ilPlugin::lookupStoredData($this->getComponentType(),\n\t\t\t\t\t\t$this->getComponentName(), $this->getSlotId(), $file);\n\t\t\t\t\t\t\n\t\t\t\t\t$pdata = $ilPluginAdmin->getAllData($this->getComponentType(),\n\t\t\t\t\t\t$this->getComponentName(), $this->getSlotId(), $file);\n\n\t\t\t\t\t$plugin[\"version\"] = $pdata[\"version\"];\n\t\t\t\t\t$plugin[\"id\"] = $pdata[\"id\"];\n\t\t\t\t\t$plugin[\"is_active\"] = $pdata[\"is_active\"];\n\t\t\t\t\t$plugin[\"inactive_reason\"] = $pdata[\"inactive_reason\"];\n\t\t\t\t\t$plugin[\"needs_update\"] = $pdata[\"needs_update\"];\n\t\t\t\t\t$plugin[\"ilias_min_version\"] = $pdata[\"ilias_min_version\"];\n\t\t\t\t\t$plugin[\"ilias_max_version\"] = $pdata[\"ilias_max_version\"];\n\t\t\t\t\t$plugin[\"activation_possible\"] = $pdata[\"activation_possible\"];\n\t\t\t\t\t$plugin[\"responsible\"] = $pdata[\"responsible\"];\n\t\t\t\t\t$plugin[\"responsible_mail\"] = $pdata[\"responsible_mail\"];\n\t\t\t\t\t\n\t\t\t\t\t$plugin[\"name\"] = $file;\n\t\t\t\t\t$plugin[\"plugin_php_file_status\"] = $this->checkPluginPhpFileAvailability($file);\n\t\t\t\t\t$plugin[\"class_file_status\"] = $this->checkClassFileAvailability($file);\n\t\t\t\t\t$plugin[\"class_file\"] = \"class.il\".$plugin[\"name\"].\"Plugin.php\";\n\t\t\t\t\t\n\t\t\t\t\t$plugins[] = $plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $plugins;\n\t}\n\t\n\t/**\n\t* Lookup slot ID for component and slot name\n\t*/\n\tstatic function lookupSlotId($a_ctype, $a_cname, $a_slot_name)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT * FROM il_pluginslot WHERE component = \".\n\t\t\t$ilDB->quote($a_ctype.\"/\".$a_cname, \"text\").\n\t\t\t\" AND name = \".$ilDB->quote($a_slot_name, \"text\");\n\t\t$set = $ilDB->query($q);\n\t\t$rec = $ilDB->fetchAssoc($set);\n\t\treturn $rec[\"id\"];\n\t}\n\n\t/**\n\t* Lookup slot name for component and slot id\n\t*/\n\tstatic function lookupSlotName($a_ctype, $a_cname, $a_slot_id)\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$q = \"SELECT * FROM il_pluginslot WHERE component = \".\n\t\t\t$ilDB->quote($a_ctype.\"/\".$a_cname, \"text\").\n\t\t\t\" AND id = \".$ilDB->quote($a_slot_id, \"text\");\n\t\t$set = $ilDB->query($q);\n\t\t$rec = $ilDB->fetchAssoc($set);\n\t\treturn $rec[\"name\"];\n\t}\n\n\t/**\n\t* Get active plugins of slot\n\t*/\n\tfunction getActivePlugins()\n\t{\n\t\tglobal $ilPluginAdmin;\n\t\t\n\t\treturn $ilPluginAdmin->getActivePluginsForSlot($this->getComponentType(),\n\t\t\t$this->getComponentName(), $this->getSlotId());\n\t}\n\t\n\t\n\t/**\n\t* Get all plugin slots\n\t*/\n\tstatic function getAllSlots()\n\t{\n\t\tglobal $ilDB;\n\t\t\n\t\t$set = $ilDB->query(\"SELECT * FROM il_pluginslot \");\n\t\t$slots = array();\n\t\twhile ($rec  = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\t$pos = strpos($rec[\"component\"], \"/\");\n\t\t\t$slots[] = array(\n\t\t\t\t\"component_type\" => substr($rec[\"component\"], 0, $pos),\n\t\t\t\t\"component_name\" => substr($rec[\"component\"], $pos + 1),\n\t\t\t\t\"slot_id\" => $rec[\"id\"],\n\t\t\t\t\"slot_name\" => $rec[\"name\"]\n\t\t\t\t);\n\t\t}\n\t\t\n\t\treturn $slots;\n\t}\n\t\n}\n?>\n
===================================================================
--- Services/Component/classes/class.ilPluginSlot.php	(revision 56812)
+++ Services/Component/classes/class.ilPluginSlot.php	(revision )
@@ -39,13 +39,17 @@
 	*/
 	function read()
 	{
-		global $ilDB;
+		$cached_component = ilCachedComponentData::getInstance();
-		
+
-		$q = "SELECT * FROM il_pluginslot WHERE component = ".
-			$ilDB->quote($this->getComponentType()."/".$this->getComponentName(), "text").
-			" AND id = ".$ilDB->quote($this->getSlotId(), "text");
-		$set = $ilDB->query($q);
-		$rec = $ilDB->fetchAssoc($set);
+		$rec = $cached_component->lookupPluginSlotById($this->getSlotId());
+
+//		global $ilDB;
+//
+//		$q = "SELECT * FROM il_pluginslot WHERE component = ".
+//			$ilDB->quote($this->getComponentType()."/".$this->getComponentName(), "text").
+//			" AND id = ".$ilDB->quote($this->getSlotId(), "text");
+//		$set = $ilDB->query($q);
+//		$rec = $ilDB->fetchAssoc($set);
 		$this->setSlotName($rec["name"]);
 	}
 	
@@ -274,14 +278,18 @@
 	*/
 	static function lookupSlotId($a_ctype, $a_cname, $a_slot_name)
 	{
-		global $ilDB;
+		$cached_component = ilCachedComponentData::getInstance();
+		$rec = $cached_component->lookupPluginSlotByName($a_slot_name);
-		
+
-		$q = "SELECT * FROM il_pluginslot WHERE component = ".
-			$ilDB->quote($a_ctype."/".$a_cname, "text").
-			" AND name = ".$ilDB->quote($a_slot_name, "text");
-		$set = $ilDB->query($q);
-		$rec = $ilDB->fetchAssoc($set);
-		return $rec["id"];
+		return $rec['id'];
+//		global $ilDB;
+//
+//		$q = "SELECT * FROM il_pluginslot WHERE component = ".
+//			$ilDB->quote($a_ctype."/".$a_cname, "text").
+//			" AND name = ".$ilDB->quote($a_slot_name, "text");
+//		$set = $ilDB->query($q);
+//		$rec = $ilDB->fetchAssoc($set);
+//		return $rec["id"];
 	}
 
 	/**
@@ -289,14 +297,19 @@
 	*/
 	static function lookupSlotName($a_ctype, $a_cname, $a_slot_id)
 	{
-		global $ilDB;
+		$cached_component = ilCachedComponentData::getInstance();
+		$rec = $cached_component->lookupPluginSlotById($a_slot_id);
-		
+
-		$q = "SELECT * FROM il_pluginslot WHERE component = ".
-			$ilDB->quote($a_ctype."/".$a_cname, "text").
-			" AND id = ".$ilDB->quote($a_slot_id, "text");
-		$set = $ilDB->query($q);
-		$rec = $ilDB->fetchAssoc($set);
-		return $rec["name"];
+		return $rec['name'];
+
+//		global $ilDB;
+//
+//		$q = "SELECT * FROM il_pluginslot WHERE component = ".
+//			$ilDB->quote($a_ctype."/".$a_cname, "text").
+//			" AND id = ".$ilDB->quote($a_slot_id, "text");
+//		$set = $ilDB->query($q);
+//		$rec = $ilDB->fetchAssoc($set);
+//		return $rec["name"];
 	}
 
 	/**
@@ -316,11 +329,14 @@
 	*/
 	static function getAllSlots()
 	{
-		global $ilDB;
-		
-		$set = $ilDB->query("SELECT * FROM il_pluginslot ");
-		$slots = array();
-		while ($rec  = $ilDB->fetchAssoc($set))
+//		global $ilDB;
+//
+//		$set = $ilDB->query("SELECT * FROM il_pluginslot ");
+//		$slots = array();
+		$cached_component = ilCachedComponentData::getInstance();
+		$recs = $cached_component->getIlPluginslotById();
+//		while ($rec  = $ilDB->fetchAssoc($set))
+		foreach($recs as $rec)
 		{
 			$pos = strpos($rec["component"], "/");
 			$slots[] = array(
